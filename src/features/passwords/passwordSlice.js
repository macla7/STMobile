import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import produce from "immer";
import { getResetPasswordInstructions, checkResetToken } from "./passwordAPI";

export const Statuses = {
  Initial: "Not Fetched",
  Loading: "Loading..",
  UpToDate: "Up To Date",
  Deleted: "Deleted",
  Error: "Error",
};

const initialState = {
  status: Statuses.Initial,
  emailValidity: null,
  tokenValidity: null,
};

export const getResetPasswordInstructionsAsync = createAsyncThunk(
  "users/password",
  async (payload) => {
    const response = await getResetPasswordInstructions(payload);
    return response;
  }
);

export const checkResetTokenAsync = createAsyncThunk(
  "users/password/edit",
  async (token) => {
    const response = await checkResetToken(token);
    return response;
  }
);

export const passwordSlice = createSlice({
  name: "password",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    emailIsNoLongerValid: (state) => {
      state.emailValidity = null;
    },
    tokenIsNoLongerValid: (state) => {
      state.tokenValidity = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // while you wait
      .addCase(getResetPasswordInstructionsAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(getResetPasswordInstructionsAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.emailValidity = action.payload.emailValidity;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(getResetPasswordInstructionsAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      })
      // while you wait
      .addCase(checkResetTokenAsync.pending, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Loading;
        });
      })
      // you got the thing
      .addCase(checkResetTokenAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.tokenValidity = action.payload.tokenValidity;
          draftState.status = Statuses.UpToDate;
        });
      })
      // error
      .addCase(checkResetTokenAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Statuses.Error;
        });
      });
  },
});

export const { emailIsNoLongerValid, tokenIsNoLongerValid } =
  passwordSlice.actions;

export const selectEmailValidity = (state) => state.passwords.emailValidity;

export const selectTokenValidity = (state) => state.passwords.tokenValidity;

export default passwordSlice.reducer;
